// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password)
VALUES (
  gen_random_uuid(),
  NOW(),
  NOW(),
  $1,
  $2
)
RETURNING ID, CREATED_AT, UPDATED_AT, EMAIL, IS_CHIRPY_RED
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
}

type CreateUserRow struct {
	ID          uuid.UUID
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
	Email       string
	IsChirpyRed bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.IsChirpyRed,
	)
	return i, err
}

const deleteAllUsers = `-- name: DeleteAllUsers :exec
DELETE FROM USERS
`

func (q *Queries) DeleteAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUsers)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT ID,
       CREATED_AT,
       UPDATED_AT,
       EMAIL,
       HASHED_PASSWORD,
       IS_CHIRPY_RED
  FROM USERS
 WHERE EMAIL = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const updateUserEmailAndPassword = `-- name: UpdateUserEmailAndPassword :one
UPDATE USERS
   SET EMAIL = $1,
       HASHED_PASSWORD = $2
 WHERE ID = $3
 RETURNING ID, CREATED_AT, UPDATED_AT, EMAIL, IS_CHIRPY_RED
`

type UpdateUserEmailAndPasswordParams struct {
	Email          string
	HashedPassword string
	ID             uuid.UUID
}

type UpdateUserEmailAndPasswordRow struct {
	ID          uuid.UUID
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
	Email       string
	IsChirpyRed bool
}

func (q *Queries) UpdateUserEmailAndPassword(ctx context.Context, arg UpdateUserEmailAndPasswordParams) (UpdateUserEmailAndPasswordRow, error) {
	row := q.db.QueryRowContext(ctx, updateUserEmailAndPassword, arg.Email, arg.HashedPassword, arg.ID)
	var i UpdateUserEmailAndPasswordRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.IsChirpyRed,
	)
	return i, err
}

const upgradeUser = `-- name: UpgradeUser :exec
UPDATE USERS
   SET IS_CHIRPY_RED = TRUE
 WHERE ID = $1
`

func (q *Queries) UpgradeUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, upgradeUser, id)
	return err
}
