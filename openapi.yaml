openapi: 3.1.3
info:
  title: Chirpy API
  version: 1.0.0
  description: API specification for the Chirpy backend service.
servers:
  - url: http://localhost:42069
    description: Local dev
paths:
  /api/healthz:
    get:
      tags:
        - Admin
      summary: Health check endpoint
      description: Returns 200 OK if the service is running.
      operationId: getHealthz
      responses:
        '200':
          description: Service is healthy
          content:
            text/plain:
              schema:
                type: string
  /api/chirps/{chirpID}:
    get:
      tags:
        - Chirps
      summary: Get a chirp.
      description: Get a single chirp by its ID.
      operationId: getChirpById
      parameters:
        - name: chirpID
          in: path
          description: The ID of the chirp.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The chirp.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "4a13e062-09d8-41b7-8a51-85c85cd4b528"
                  created_at:
                    type: string
                    example: "2025-05-15T08:19:18.031988Z"
                  updated_at:
                    type: string
                    example: "2025-05-15T08:19:18.031988Z"
                  body:
                    type: string
                    example: "Hello, world!"
                  user_id:
                    type: string
                    example: "123e4567-e89b-12d3-a456-426614174000"
        '404':
          description: Chirp not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/chirps:
    post:
      tags:
        - Chirps
      summary: Create a chirp
      description: Validates a chirp (message) and creates it.
      operationId: createChirp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: The chirp message to validate.
                user_id:
                  type: string
                  description: The UUID of the creating user.
            example:
              body: "Hello, world!"
              user_id: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '201':
          description: Chirp created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "4a13e062-09d8-41b7-8a51-85c85cd4b528"
                  created_at:
                    type: string
                    example: "2025-05-15T08:19:18.031988Z"
                  updated_at:
                    type: string
                    example: "2025-05-15T08:19:18.031988Z"
                  body:
                    type: string
                    example: "Hello, world!"
                  user_id:
                    type: string
                    example: "123e4567-e89b-12d3-a456-426614174000"
        '400':
          description: Invalid request or chirp
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    get:
      tags:
        - Chirps
      summary: Get all chirps.
      description: List all chirps. Order by created at.
      operationId: getAllChirps
      responses:
        '200':
          description: List of chirps
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "4a13e062-09d8-41b7-8a51-85c85cd4b528"
                    created_at:
                      type: string
                      example: "2025-05-15T08:19:18.031988Z"
                    updated_at:
                      type: string
                      example: "2025-05-15T08:19:18.031988Z"
                    body:
                      type: string
                      example: "Hello, world!"
                    user_id:
                      type: string
                      example: "123e4567-e89b-12d3-a456-426614174000"
  /api/users:
    post:
      tags:
        - Users
      summary: Create user
      description: Creates a new user.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email
                password:
                  type: string
                  description: The user's password
            example:
              email: "user@example.com"
              password: "password123"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "123e4567-e89b-12d3-a456-426614174000"
                  created_at:
                    type: string
                    example: "2025-05-15T08:19:18.031988Z"
                  updated_at:
                    type: string
                    example: "2025-05-15T08:19:18.031988Z"
                  email:
                    type: string
                    example: "user@example.com"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/login:
    post:
      tags:
        - Login
      summary: Login
      description: Login to the app.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email
                password:
                  type: string
                  description: The user's password
            example:
              email: "user@example.com"
              password: "password123"
      responses:
        '200':
          description: User logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "123e4567-e89b-12d3-a456-426614174000"
                  created_at:
                    type: string
                    example: "2025-05-15T08:19:18.031988Z"
                  updated_at:
                    type: string
                    example: "2025-05-15T08:19:18.031988Z"
                  email:
                    type: string
                    example: "user@example.com"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /admin/metrics:
    get:
      tags:
        - Admin
      summary: Metrics endpoint
      description: Returns internal metrics for the application.
      operationId: getMetrics
      responses:
        '200':
          description: Successful response with metrics
          content:
            text/html:
              schema:
                type: string
  /admin/reset:
    post:
      tags:
        - Admin
      summary: Reset everything
      description: Resets application data. It will only work when PLATFORM is dev.
      operationId: resetApp
      responses:
        '200':
          description: Reset successfully
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    ErrorResponse:
      description: Error response
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
security:
  - bearerAuth: []
